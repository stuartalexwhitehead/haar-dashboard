require('dotenv').config({
  silent: true,
});
const express = require('express');
const app = express();
const path = require('path');

import React from 'react';
import { renderToString } from 'react-dom/server';

import { RouterContext, match } from 'react-router';
import createRoutes from 'common/routes';

import { applyMiddleware, createStore } from 'redux';
import { Provider } from 'react-redux';
import thunk from 'redux-thunk';

import { reducers } from 'common/reducers';
import fetchComponentData from 'common/utils/fetch-component-data';
import { needsAuthentication, needsAuthorisation } from 'common/utils/auth-helper';

import * as userActions from 'common/actions/me';

import renderFullPage from 'server/utils/render-full-page';

import login from 'server/middlewares/login';
import logout from 'server/middlewares/logout';
import cookieParser from 'cookie-parser';
import bodyParser from 'body-parser';

import _ from 'lodash';

app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '../../../dist')));
app.post('/login', login);
app.get('/logout', logout);

app.use((req, res) => {
  const routes = createRoutes();

  match({
    routes,
    location: req.url,
  }, (err, redirect, renderProps) => {
    if (err) {
      return res.status(500).send(err.message);
    }

    if (redirect) {
      return res.redirect(302, redirect.pathname);
    }

    if (renderProps === undefined) {
      return res.status(404).send('Not Found');
    }

    const initialState = {};

    if (req.cookies.token && req.cookies.token !== 'delete') {
      _.extend(initialState, {
        auth: {
          isAuthenticated: true,
          token: req.cookies.token,
        },
      });
    }

    const store = createStore(reducers, initialState, applyMiddleware(thunk));
    let state = store.getState();
    const params = {
      token: state.auth.token,
      segments: renderProps.params,
      res,
    };

    function buildPage() {
      if (needsAuthentication(renderProps.components, store.getState())) {
        return res.redirect('/login');
      }

      if (needsAuthorisation(renderProps.components, store.getState())) {
        return res.status(403).send('Not Authorised');
      }

      return fetchComponentData(store.dispatch, renderProps.components, params)

      .then(() => {
        const initView = renderToString((
          <Provider store={store}>
            <RouterContext {...renderProps} />
          </Provider>
        ));

        const stateString = JSON.stringify(store.getState());
        const page = renderFullPage(initView, stateString);
        res.status(200).send(page);
      });
    }

    if (state.auth.token) {
      return store.dispatch(userActions.fetchCurrentUser(params))
      .then(() => {
        state = store.getState();
        return buildPage();
      });
    }

    return buildPage();
  });
});

export default app;
