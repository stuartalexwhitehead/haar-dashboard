import React from 'react';
import { connect } from 'react-redux';

import Button from 'common/components/button';
import DashboardHeader from 'common/components/dashboard-header';
import ResponsiveTable from 'common/components/responsive-table';
import Filter from 'common/components/filter';
import FieldInput from 'common/forms/field-input';
import FieldDropdown from 'common/forms/field-dropdown';
import Pagination from 'common/components/pagination';
import {
  fetchUsers,
  clearUsersIndex,
  deleteUser,
  filterUsers,
  clearUsersFilter,
} from 'common/actions/users';


class Users extends React.Component {
  static requireAdmin = true;
  static needs = [
    fetchUsers,
  ];

  static propTypes = {
    meta: React.PropTypes.object,
    me: React.PropTypes.object,
    users: React.PropTypes.array,
    status: React.PropTypes.string,
    filter: React.PropTypes.object,
    dispatch: React.PropTypes.func,
  }

  componentWillMount() {
    const { users, dispatch } = this.props;

    if (users === null) {
      dispatch(fetchUsers());
    }
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearUsersIndex());
    dispatch(clearUsersFilter());
  }

  getFilter = () => {
    const { filter } = this.props;
    const specification = {
      'name.given': {
        label: 'First Name',
        component: FieldInput,
      },
      'name.family': {
        label: 'Last Name',
        component: FieldInput,
      },
      username: {
        label: 'Username',
        component: FieldInput,
      },
      role: {
        label: 'Role',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Any',
            user: 'User',
            admin: 'Admin',
          },
        },
      },
      sort: {
        label: 'Sort',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            username: 'Username',
            'name.given': 'First Name',
            'name.family': 'Last Name',
            role: 'Role',
          },
        },
      },
      order: {
        label: 'Order',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            asc: 'Ascending',
            desc: 'Descending',
          },
        },
      },
    };

    return (
      <Filter
        filterFor="Users"
        fields={Object.keys(specification)}
        specification={specification}
        onSubmit={this.filterUsers}
        initialValues={filter}
      />
    );
  }

  getTable = () => {
    const { users, me } = this.props;
    const hasUsers = users !== null && users.length;

    const columns = {
      username: 'Username',
      firstName: 'First Name',
      lastName: 'Last Name',
      role: 'Role',
      action: 'Actions',
    };

    if (hasUsers) {
      const data = users.map(user => {
        const actions = (
          <span>
            {user._id === me._id ?
              <Button to={'/dashboard/me'} size="small">Profile</Button>
            :
              <Button to={`/dashboard/users/${user._id}/edit`} size="small">Edit</Button>
            }

            {user._id !== me._id ?
              <Button
                size="small"
                theme="danger"
                onClick={() => this.deleteUser(user)}
              >
                Remove
              </Button>
            : null}

          </span>
        );

        return {
          username: user.username,
          firstName: user.name.given,
          lastName: user.name.family,
          role: user.role,
          action: actions,
        };
      });

      return <ResponsiveTable columns={columns} data={data} />;
    }

    return null;
  }

  deleteUser = (user) => {
    const confirm = window.confirm( // eslint-disable-line no-alert
      `Do you want to remove ${user.name.given} ${user.name.family} (${user.username})?`
    );
    const { dispatch } = this.props;

    if (confirm) {
      dispatch(deleteUser({
        user,
      })).then(() => {
        dispatch(fetchUsers());
      });
    }
  }

  filterUsers = (data) => {
    const { dispatch } = this.props;
    dispatch(filterUsers({
      filter: data,
    }));
    dispatch(fetchUsers());
  }

  render() {
    const { meta } = this.props;
    const table = this.getTable();

    return (
      <div>
        <DashboardHeader title="Users" />
        <Button to="/dashboard/users/add"><span className="icon--plus">Add User</span></Button>

        {!!table ?
          <div>
            {this.getFilter()}
            {table}
            <Pagination meta={meta} action={fetchUsers} />
          </div>
        :
          <div>
            <p>There arenâ€™t any users yet.</p>
            <Button to="/dashboard/users/add">Add a user</Button>
          </div>
        }
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  status: state.users.index.status,
  meta: state.users.index.meta,
  users: state.users.index.users,
  filter: state.users.index.filter,
  me: state.me,
});

export default connect(mapStateToProps)(Users);
