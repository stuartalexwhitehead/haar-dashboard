import React from 'react';
import { connect } from 'react-redux';

import DashboardHeader from 'common/components/dashboard-header';
import { editDeviceType, fetchDeviceType, clearEditDeviceType } from 'common/actions/device-types';
import DeviceTypeForm from 'common/forms/device-type-form';

class EditDeviceType extends React.Component {
  static requireAdmin = true;
  static needs = [
    fetchDeviceType,
  ];

  static propTypes = {
    deviceType: React.PropTypes.object,
    params: React.PropTypes.object,
    dispatch: React.PropTypes.func,
  };

  componentWillMount() {
    const { deviceType, params, dispatch } = this.props;

    if (!deviceType) {
      dispatch(fetchDeviceType({
        segments: params,
      }));
    }
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearEditDeviceType());
  }

  submitCallback = (data) => {
    const { dispatch, params } = this.props;

    return dispatch(editDeviceType({
      segments: params,
      data,
    }));
  }

  render() {
    const { deviceType } = this.props;
    return (
      <div>
        <DashboardHeader title="Edit Device Type" />
        {!!deviceType ?
          <DeviceTypeForm
            onSubmit={this.submitCallback}
            cta="Update"
            initialValues={deviceType}
          />
        : null}
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  status: state.deviceTypes.edit.status,
  meta: state.deviceTypes.edit.meta,
  deviceType: state.deviceTypes.edit.deviceType,
});

export default connect(mapStateToProps)(EditDeviceType);
