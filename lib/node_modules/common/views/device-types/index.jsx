import React from 'react';
import { connect } from 'react-redux';

import Button from 'common/components/button';
import DashboardHeader from 'common/components/dashboard-header';
import ResponsiveTable from 'common/components/responsive-table';
import Filter from 'common/components/filter';
import FieldInput from 'common/forms/field-input';
import FieldDropdown from 'common/forms/field-dropdown';
import Pagination from 'common/components/pagination';
import {
  fetchDeviceTypes,
  clearDeviceTypesIndex,
  filterDeviceTypes,
  clearDeviceTypesFilter,
} from 'common/actions/device-types';

class DeviceTypes extends React.Component {
  static requireAdmin = true;
  static needs = [
    fetchDeviceTypes,
  ];

  static propTypes = {
    meta: React.PropTypes.object,
    deviceTypes: React.PropTypes.array,
    filter: React.PropTypes.object,
    dispatch: React.PropTypes.func,
  }

  componentWillMount() {
    const { deviceTypes, dispatch } = this.props;

    if (deviceTypes === null) {
      dispatch(fetchDeviceTypes());
    }
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearDeviceTypesFilter());
    dispatch(clearDeviceTypesIndex());
  }

  getFilter = () => {
    const { filter } = this.props;
    const specification = {
      name: {
        label: 'Name',
        component: FieldInput,
      },
      developer: {
        label: 'Developer',
        component: FieldInput,
      },
      deviceClass: {
        label: 'Device Class',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Any',
            input: 'Input',
            output: 'Output',
          },
        },
      },
      sort: {
        label: 'Sort',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            name: 'Name',
            developer: 'Developer',
            deviceClass: 'Device Class',
          },
        },
      },
      order: {
        label: 'Order',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            asc: 'Ascending',
            desc: 'Descending',
          },
        },
      },
    };

    return (
      <Filter
        filterFor="Device Types"
        fields={Object.keys(specification)}
        specification={specification}
        onSubmit={this.filterDeviceTypes}
        initialValues={filter}
      />
    );
  }

  getTable = () => {
    const { deviceTypes, filter } = this.props;
    const deviceTypesExistInData = deviceTypes !== null && deviceTypes.length;
    const filterExists = deviceTypes !== null && filter !== null;
    const hasDeviceTypes = deviceTypesExistInData || filterExists;

    const columns = {
      name: 'Name',
      developer: 'Developer',
      deviceClass: 'Device Class',
      action: 'Actions',
    };

    if (hasDeviceTypes) {
      const data = deviceTypes.map(deviceType => {
        const actions = (
          <span>
            <Button
              to={`/dashboard/device-types/${deviceType._id}/edit`}
              size="small"
              className="device-types__cta"
            >
              Edit
            </Button>
          </span>
        );

        return {
          name: deviceType.name,
          developer: deviceType.developer,
          deviceClass: deviceType.deviceClass,
          action: actions,
        };
      });

      return <ResponsiveTable columns={columns} data={data} />;
    }

    return null;
  }

  filterDeviceTypes = (data) => {
    const { dispatch } = this.props;
    dispatch(filterDeviceTypes({
      filter: data,
    }));
    dispatch(fetchDeviceTypes());
  }

  render() {
    const { meta } = this.props;
    const table = this.getTable();

    return (
      <div className="device-types">
        <DashboardHeader title="Device Types" />
        <Button to="/dashboard/device-types/add" className="device-types__add">
          <span className="icon--plus device-types__add-icon">
            Add Device Type
          </span>
        </Button>

        {!!table ?
          <div>
            {this.getFilter()}
            {table}
            <Pagination meta={meta} action={fetchDeviceTypes} />
          </div>
        :
          <div>
            <p className="device-types__none">There arenâ€™t any device types yet.</p>
          </div>
        }
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  status: state.deviceTypes.index.status,
  meta: state.deviceTypes.index.meta,
  filter: state.deviceTypes.index.filter,
  deviceTypes: state.deviceTypes.index.deviceTypes,
});

export default connect(mapStateToProps)(DeviceTypes);
