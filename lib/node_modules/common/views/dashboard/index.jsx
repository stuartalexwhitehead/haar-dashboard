import React from 'react';
import { connect } from 'react-redux';
import classnames from 'classnames';

import Button from 'common/components/button';
import DashboardHeader from 'common/components/dashboard-header';
import {
  fetchDashboardDevices,
  clearDashboardDevices,
} from 'common/actions/dashboard';

class Dashboard extends React.Component {
  static needs = [
    fetchDashboardDevices,
  ];

  static propTypes = {
    devices: React.PropTypes.array,
    dispatch: React.PropTypes.func,
  };

  componentWillMount() {
    const { devices, dispatch } = this.props;

    if (devices === null) {
      dispatch(fetchDashboardDevices());
    }
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearDashboardDevices());
  }

  renderSensor = (sensor, index) => {
    const classes = classnames(
      'dashboard__device',
      'dashboard__device--sensor',
      {
        'dashboard__device--odd': index % 2 === 0,
        'dashboard__device--even': index % 2 === 1,
        'dashboard__device--first': index % 3 === 0,
        'dashboard__device--second': index % 3 === 1,
        'dashboard__device--third': index % 3 === 2,
      }
    );

    let descriptorsByName = null;
    if (sensor.deviceType.dataDescriptor) {
      descriptorsByName = sensor.deviceType.dataDescriptor.reduce((obj, descriptor) => (
        Object.assign({}, obj, {
          [descriptor.name]: descriptor,
        })
      ), {});
    }


    let dataPointsByName = null;
    if (sensor.dataPoint && sensor.dataPoint.data) {
      dataPointsByName = sensor.dataPoint.data.reduce((obj, dataPoint) => (
        Object.assign({}, obj, {
          [dataPoint.name]: dataPoint,
        })
      ), {});
    }

    let previousData = <div className="dashboard__latest-data"><p>No data is available</p></div>;
    if (descriptorsByName && dataPointsByName) {
      previousData = (
        <div className="dashboard__latest-data">
          <ul>
          {
            Object.keys(descriptorsByName).map((name, i) => (
              <li key={i}>
                <span>{`${descriptorsByName[name].label}: `}</span>
                <span>
                  {`${dataPointsByName[name].value}${descriptorsByName[name].unit.shortform}`}
                </span>
              </li>
            ))
          }
          </ul>
        </div>
      );
    }

    return (
      <div
        key={index}
        className={classes}
      >
        <h2 className="dashboard__device-title">{sensor.name}</h2>
        <h3 className="dashboard__sub-sub-heading">Description</h3>
        <p className="dashboard__device-description">{sensor.description}</p>

        <h3 className="dashboard__sub-sub-heading">Latest Data</h3>
        {previousData}

        <Button
          to={`/dashboard/devices/${sensor._id}/data`}
          size="small"
          className="dashboard__device-cta"
        >
          Data
        </Button>
      </div>
    );
  }

  renderActuator = (actuator, index) => {
    const classes = classnames(
      'dashboard__device',
      'dashboard__device--sensor',
      {
        'dashboard__device--odd': index % 2 === 0,
        'dashboard__device--even': index % 2 === 1,
        'dashboard__device--first': index % 3 === 0,
        'dashboard__device--second': index % 3 === 1,
        'dashboard__device--third': index % 3 === 2,
      }
    );

    return (
      <div
        key={index}
        className={classes}
      >
        <h2 className="dashboard__device-title">{actuator.name}</h2>
        <p className="dashboard__device-description">{actuator.description}</p>
        <Button
          to={`/dashboard/devices/${actuator._id}/rules`}
          size="small"
          className="dashboard__device-cta"
        >
          Rules
        </Button>
      </div>
    );
  }

  renderSensors = () => {
    const { devices } = this.props;

    if (!devices) {
      return null;
    }

    const inputs = devices.filter(device => device.deviceType.deviceClass === 'input');
    return inputs.map((device, index) => this.renderSensor(device, index));
  }

  renderActuators = () => {
    const { devices } = this.props;

    if (!devices) {
      return null;
    }

    const outputs = devices.filter(device => device.deviceType.deviceClass === 'output');
    return outputs.map((device, index) => this.renderActuator(device, index));
  }

  render() {
    const sensors = this.renderSensors();
    const actuators = this.renderActuators();

    return (
      <div>
        <DashboardHeader title="Dashboard" />

        {sensors && sensors.length ?
          <div>
            <h2 className="dashboard__sub-heading">Sensors</h2>
            {sensors}
          </div>
        : null}

        {actuators && actuators.length ?
          <div>
            <h2 className="dashboard__sub-heading">Actuators</h2>
            {actuators}
          </div>
        : null}
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  devices: state.dashboard.devices,
});

export default connect(mapStateToProps)(Dashboard);
