import React from 'react';
import { connect } from 'react-redux';

import DashboardHeader from 'common/components/dashboard-header';
import RuleForm from 'common/forms/rule-form';
import { fetchRule, editRule, clearEditRule } from 'common/actions/rules';

class EditRule extends React.Component {
  static requireAdmin = true;
  static needs = [
    fetchRule,
  ];

  static propTypes = {
    meta: React.PropTypes.object,
    rule: React.PropTypes.object,
    dispatch: React.PropTypes.func,
    params: React.PropTypes.object,
  }

  componentWillMount() {
    const { rule, params, dispatch } = this.props;

    if (!rule) {
      dispatch(fetchRule({
        segments: params,
      }));
    }
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearEditRule());
  }

  submitCallback = (data) => {
    const { params, dispatch } = this.props;

    return dispatch(editRule({
      segments: params,
      data,
    }));
  }

  render() {
    const { rule } = this.props;

    return (
      <div>
        <DashboardHeader title="Edit a Rule" />
        <RuleForm
          cta="Submit"
          onSubmit={this.submitCallback}
          initialValues={rule}
        />
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  meta: state.rules.edit.meta,
  rule: state.rules.edit.rule,
});

export default connect(mapStateToProps)(EditRule);
