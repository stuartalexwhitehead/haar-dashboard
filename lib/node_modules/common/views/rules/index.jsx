import React from 'react';
import { connect } from 'react-redux';

import Button from 'common/components/button';
import DashboardHeader from 'common/components/dashboard-header';
import ResponsiveTable from 'common/components/responsive-table';
import Filter from 'common/components/filter';
import FieldInput from 'common/forms/field-input';
import FieldDropdown from 'common/forms/field-dropdown';
import Pagination from 'common/components/pagination';
import {
  fetchRules,
  clearRulesIndex,
  deleteRule,
  filterRules,
  clearRulesFilter,
  enableRule,
  disableRule,
} from 'common/actions/rules';

class Rules extends React.Component {
  static requireAdmin = true;
  static needs = [
    fetchRules,
  ];

  static propTypes = {
    meta: React.PropTypes.object,
    me: React.PropTypes.object,
    rules: React.PropTypes.array,
    status: React.PropTypes.string,
    filter: React.PropTypes.object,
    dispatch: React.PropTypes.func,
    params: React.PropTypes.object,
  }

  componentWillMount() {
    const { rules, params, dispatch } = this.props;

    if (rules === null) {
      dispatch(fetchRules({
        segments: params,
      }));
    }
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearRulesIndex());
    dispatch(clearRulesFilter());
  }

  getFilter() {
    const { filter } = this.props;
    const specification = {
      name: {
        label: 'Name',
        component: FieldInput,
      },
      enabled: {
        label: 'Enabled',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Any',
            true: 'Enabled',
            false: 'Disabled',
          },
        },
      },
      sort: {
        label: 'Sort',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            name: 'Name',
            enabled: 'Enabled',
            createdAt: 'Date Created',
            updatedAt: 'Date Updated',
          },
        },
      },
      order: {
        label: 'Order',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            asc: 'Ascending',
            desc: 'Descending',
          },
        },
      },
    };

    return (
      <Filter
        filterFor="Rules"
        fields={Object.keys(specification)}
        specification={specification}
        onSubmit={this.filterRules}
        initialValues={filter}
      />
    );
  }

  getTable = () => {
    const { rules, params, filter } = this.props;
    const rulesExistInData = rules !== null && rules.length;
    const filterExists = rules !== null && filter !== null;
    const hasRules = rulesExistInData || filterExists;

    const columns = {
      name: 'Name',
      description: 'Description',
      input: 'Input',
      action: 'Actions',
    };

    if (hasRules) {
      const data = rules.map(rule => {
        const actions = (
          <span>
            <Button
              to={`/dashboard/devices/${params.device}/rules/${rule._id}/edit`}
              size="small"
              className="rules__cta"
            >
              Edit
            </Button>
            {rule.enabled ?
              <Button
                size="small"
                theme="danger"
                onClick={() => this.disableRule(rule)}
                className="rules__cta"
              >
                Disable
              </Button>
            :
              <Button
                size="small"
                onClick={() => this.enableRule(rule)}
                className="rules__cta"
              >
                Enable
              </Button>
            }
            <Button
              size="small"
              theme="danger"
              onClick={() => this.deleteRule(rule)}
              className="rules__cta"
            >
              Remove
            </Button>
          </span>
        );

        return {
          name: rule.name,
          description: rule.description,
          input: rule.input.name,
          action: actions,
        };
      });

      return <ResponsiveTable columns={columns} data={data} />;
    }

    return null;
  }

  filterRules = (data) => {
    const { params, dispatch } = this.props;

    dispatch(filterRules({
      filter: data,
    }));
    dispatch(fetchRules({
      segments: params,
    }));
  }

  deleteRule = (rule) => {
    const confirm = window.confirm( // eslint-disable-line no-alert
      `Do you want to remove ${rule.name}?`
    );
    const { dispatch, params } = this.props;

    if (confirm) {
      dispatch(deleteRule({
        rule,
      })).then(() => {
        dispatch(fetchRules({
          segments: params,
        }));
      });
    }
  }

  enableRule = (rule) => {
    const confirm = window.confirm( // eslint-disable-line no-alert
      `Do you want enable ${rule.name}?`
    );
    const { params, dispatch } = this.props;

    if (confirm) {
      dispatch(enableRule({
        rule,
      }))
      .then(() => {
        dispatch(fetchRules({
          segments: params,
        }));
      });
    }
  }

  disableRule = (rule) => {
    const confirm = window.confirm( // eslint-disable-line no-alert
      `Do you want disable ${rule.name}?`
    );
    const { params, dispatch } = this.props;

    if (confirm) {
      dispatch(disableRule({
        rule,
      }))
      .then(() => {
        dispatch(fetchRules({
          segments: params,
        }));
      });
    }
  }

  render() {
    const { meta, params } = this.props;
    const table = this.getTable();

    return (
      <div className="rules">
        <DashboardHeader title="Rules" />
        <Button to={`/dashboard/devices/${params.device}/rules/add`} className="rules__add">
          <span className="icon--plus rules__add-icon">Add Rule</span>
        </Button>

        {!!table ?
          <div>
            {this.getFilter()}
            {table}
            <Pagination
              meta={meta}
              action={fetchRules}
              actionParams={{
                segments: params,
              }}
            />
          </div>
        :
          <div>
            <p className="rules__none">There arenâ€™t any rules yet.</p>
          </div>
        }
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  status: state.rules.index.status,
  meta: state.rules.index.meta,
  rules: state.rules.index.rules,
  filter: state.rules.index.filter,
});

export default connect(mapStateToProps)(Rules);
