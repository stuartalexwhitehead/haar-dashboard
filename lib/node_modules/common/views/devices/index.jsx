import React from 'react';
import { connect } from 'react-redux';

import Button from 'common/components/button';
import DashboardHeader from 'common/components/dashboard-header';
import ResponsiveTable from 'common/components/responsive-table';
import Filter from 'common/components/filter';
import FieldInput from 'common/forms/field-input';
import FieldDropdown from 'common/forms/field-dropdown';
import Pagination from 'common/components/pagination';
import {
  fetchDevices,
  clearDevicesIndex,
  filterDevices,
  clearDevicesFilter,
  deleteDevice } from 'common/actions/devices';

class Devices extends React.Component {
  static needs = [
    fetchDevices,
  ];

  static propTypes = {
    meta: React.PropTypes.object,
    devices: React.PropTypes.array,
    filter: React.PropTypes.object,
    dispatch: React.PropTypes.func,
  }

  componentWillMount() {
    const { devices, dispatch } = this.props;

    if (devices === null) {
      dispatch(fetchDevices());
    }
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearDevicesIndex());
    dispatch(clearDevicesFilter());
  }

  getFilter = () => {
    const { filter } = this.props;

    const specification = {
      name: {
        label: 'Name',
        component: FieldInput,
      },
      visibility: {
        label: 'Visibility',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Any',
            private: 'Private',
            public: 'Public',
          },
        },
      },
      'deviceType.deviceClass': {
        label: 'Device Class',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Any',
            input: 'Input (Sensor)',
            output: 'Output (Actuator)',
          },
        },
      },
      sort: {
        label: 'Sort',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            name: 'Name',
            visibility: 'Visibility',
            address: 'Address',
          },
        },
      },
      order: {
        label: 'Order',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            asc: 'Ascending',
            desc: 'Descending',
          },
        },
      },
    };

    return (
      <Filter
        filterFor="Devices"
        fields={Object.keys(specification)}
        specification={specification}
        onSubmit={this.filterDevices}
        initialValues={filter}
      />
    );
  }

  getTable = () => {
    const { devices, filter } = this.props;
    const devicesExistInData = devices !== null && devices.length;
    const filterExists = devices !== null && filter !== null;
    const hasDevices = devicesExistInData || filterExists;

    const columns = {
      name: 'Name',
      deviceType: 'Device Type',
      owner: 'Owner',
      visibility: 'Visibility',
      address: 'Address',
      action: 'Actions',
    };

    if (hasDevices) {
      const data = devices.map(device => {
        const actions = (
          <span>
            {device.deviceType.deviceClass === 'input' ?
              <Button
                to={`/dashboard/devices/${device._id}/data`}
                size="small"
                className="devices__cta"
              >
                Data
              </Button>
            : null}
            {device.deviceType.deviceClass === 'output' ?
              <Button
                to={`/dashboard/devices/${device._id}/rules`}
                size="small"
                className="devices__cta"
              >
                Rules
              </Button>
            : null}

            <Button
              to={`/dashboard/devices/${device._id}/edit`}
              size="small"
              className="devices__cta"
            >
              Edit
            </Button>
            <Button
              size="small"
              theme="danger"
              onClick={() => this.deleteDevice(device)}
              className="devices__cta"
            >
              Remove
            </Button>
          </span>
        );

        return {
          name: device.name,
          deviceType: device.deviceType.name,
          owner: `${device.owner.name.given} ${device.owner.name.family}`,
          visibility: device.visibility,
          address: device.address,
          action: actions,
        };
      });

      return <ResponsiveTable columns={columns} data={data} />;
    }

    return null;
  }

  deleteDevice = (device) => {
    const confirm = window.confirm( // eslint-disable-line no-alert
      `Do you want to remove ${device.name} (${device.address})?`
    );
    const { dispatch } = this.props;

    if (confirm) {
      dispatch(deleteDevice({
        device,
      })).then(() => {
        dispatch(fetchDevices());
      });
    }
  }

  filterDevices = (data) => {
    const { dispatch } = this.props;

    dispatch(filterDevices({
      filter: data,
    }));
    dispatch(fetchDevices());
  }

  render() {
    const { meta } = this.props;
    const table = this.getTable();
    const filter = this.getFilter();

    return (
      <div className="devices">
        <DashboardHeader title="Devices" />
        <Button to="/dashboard/devices/add" className="devices__add">
          <span className="icon--plus devices__add-icon">
          Add Device</span>
        </Button>

        {!!table ?
          <div>
            {filter}
            {table}
            <Pagination meta={meta} action={fetchDevices} />
          </div>
        :
          <div>
            <p className="devices__none">There arenâ€™t any devices yet.</p>
          </div>
        }
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  status: state.devices.index.status,
  meta: state.devices.index.meta,
  devices: state.devices.index.devices,
  filter: state.devices.index.filter,
  me: state.me,
});

export default connect(mapStateToProps)(Devices);
