import React from 'react';
import { connect } from 'react-redux';

import DashboardHeader from 'common/components/dashboard-header';
import DeviceForm from 'common/forms/device-form';
import {
  fetchDevice,
  editDevice,
  clearEditDevice } from 'common/actions/devices';

class EditDevice extends React.Component {
  static requireAdmin = true;
  static needs = [
    fetchDevice,
  ];

  static propTypes = {
    device: React.PropTypes.object,
    dispatch: React.PropTypes.func,
    params: React.PropTypes.object,
  }

  componentWillMount() {
    const { device, params, dispatch } = this.props;

    if (!device) {
      dispatch(fetchDevice({
        segments: params,
      }));
    }
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearEditDevice());
  }

  submitCallback = (data) => {
    const { dispatch, params } = this.props;

    return dispatch(editDevice({
      segments: params,
      data,
    }));
  }

  render() {
    const { device } = this.props;

    return (
      <div>
        <DashboardHeader title="Edit a Device" />
        <DeviceForm
          cta="Update"
          onSubmit={this.submitCallback}
          initialValues={device}
        />
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  status: state.devices.edit.status,
  meta: state.devices.edit.meta,
  device: state.devices.edit.device,
});

export default connect(mapStateToProps)(EditDevice);
