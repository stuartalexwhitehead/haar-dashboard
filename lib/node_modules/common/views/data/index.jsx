import React from 'react';
import { connect } from 'react-redux';
import _ from 'lodash';

import DashboardHeader from 'common/components/dashboard-header';
import Graph from 'common/components/graph';
import Filter from 'common/components/filter';
import FieldInput from 'common/forms/field-input';
import Paginate from 'common/components/pagination';
import {
  fetchDataProducerDevice,
  fetchDataPoints,
  clearDataProducerDevice,
  clearDataPoints,
  clearDataPointsFilter,
  filterDataPoints,
} from 'common/actions/data';

class Data extends React.Component {
  static needs = [
    fetchDataProducerDevice,
    fetchDataPoints,
  ];

  static propTypes = {
    params: React.PropTypes.object,
    meta: React.PropTypes.object,
    data: React.PropTypes.array,
    device: React.PropTypes.object,
    filter: React.PropTypes.object,
    dispatch: React.PropTypes.func,
  };

  componentWillMount() {
    const { device, data, params, dispatch } = this.props;

    if (device === null) {
      dispatch(fetchDataProducerDevice({
        segments: params,
      }));
    }

    if (data === null) {
      dispatch(fetchDataPoints({
        segments: params,
      }));
    }
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearDataProducerDevice());
    dispatch(clearDataPoints());
    dispatch(clearDataPointsFilter());
  }

  getFilter = () => {
    const { filter } = this.props;
    const specification = {
      'data.name': {
        label: 'Data Name',
        component: FieldInput,
      },
      'data.value': {
        label: 'Data Value',
        component: FieldInput,
      },
      dateFrom: {
        label: 'Date From',
        component: FieldInput,
      },
      dateTo: {
        label: 'Date To',
        component: FieldInput,
      },
    };

    return (
      <Filter
        filterFor="Data"
        fields={Object.keys(specification)}
        specification={specification}
        onSubmit={this.filterData}
        initialValues={filter}
      />
    );
  }

  filterData = (data) => {
    const { params, dispatch } = this.props;

    dispatch(filterDataPoints({
      filter: data,
    }));
    dispatch(fetchDataPoints({
      segments: params,
    }));
  }

  render() {
    const { device, data, meta, params } = this.props;
    const title = !!device ? `Data for ${device.name}` : 'Data';
    const dataDescriptor = _.get(device, 'deviceType.dataDescriptor', null);

    return (
      <div className="data">
        <DashboardHeader title={title} />
        <div className="data__graph">
          {dataDescriptor && data ?
            <Graph
              dataDescriptor={device.deviceType.dataDescriptor}
              dataPoints={data}
            />
          : null}
        </div>
        {meta ?
          <Paginate
            meta={meta}
            action={fetchDataPoints}
            actionParams={{
              segments: params,
            }}
          />
        : null}
        {this.getFilter()}
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  device: state.data.device,
  filter: state.data.filter,
  status: state.data.status,
  meta: state.data.meta,
  data: state.data.data,
});

export default connect(mapStateToProps)(Data);
