function data(state = {
  device: null,
  filter: null,
  status: null,
  meta: null,
  data: [],
  realtime: {
    isSubscribed: false,
    handler: null,
  },
}, action) {
  switch (action.type) {
    case 'REQUEST_DATA_PRODUCER_DEVICE':
      return state;
    case 'RECEIVE_DATA_PRODUCER_DEVICE':
      return Object.assign({}, state, {
        device: action.device,
      });
    case 'REQUEST_DATA_POINTS':
      return state;
    case 'RECEIVE_DATA_POINTS':
      return Object.assign({}, state, {
        status: action.data.status,
        meta: action.data.meta,
        data: action.data.data,
      });
    case 'CLEAR_DATA_PRODUCER_DEVICE':
      return Object.assign({}, state, {
        device: null,
      });
    case 'CLEAR_DATA_POINTS':
      return Object.assign({}, state, {
        status: null,
        meta: null,
        data: [],
      });
    case 'CLEAR_DATA_POINTS_FILTER':
      return Object.assign({}, state, {
        filter: null,
      });
    case 'FILTER_DATA_POINTS':
      return Object.assign({}, state, {
        filter: action.filter,
        status: null,
        meta: null,
        data: null,
      });
    case 'SENSOR_STREAM_SUBSCRIBED':
      return Object.assign({}, state, {
        realtime: {
          isSubscribed: true,
          handler: action.handler,
        },
      });
    case 'SENSOR_STREAM_UNSUBSCRIBED':
      return Object.assign({}, state, {
        realtime: {
          isSubscribed: false,
          handler: null,
        },
      });
    case 'ADD_SENSOR_DATA_POINT':
      return Object.assign({}, state, {
        data: state.data.length < 20
          ? (state.data.concat(action.dataPoint))
          : (state.data.slice(1).concat(action.dataPoint)),
      });
    default:
      return state;
  }
}

export default data;
