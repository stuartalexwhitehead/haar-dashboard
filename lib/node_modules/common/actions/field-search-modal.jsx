import axios from 'axios';

import * as requestActions from 'common/actions/request';
import { addFlash } from 'common/actions/flash';
import qs from 'qs';

export function requestFieldSearchModalData() {
  return {
    type: 'REQUEST_FIELD_SEARCH_MODAL_DATA',
  };
}

export function receiveFieldSearchModalData(response) {
  return {
    type: 'RECEIVE_FIELD_SEARCH_MODAL_DATA',
    response,
  };
}

export function fetchFieldSearchModalData(params) {
  return function fetchFieldSearchModalDataThunk(dispatch, getState) {
    const { auth, fieldSearchModal } = getState();
    dispatch(requestFieldSearchModalData);
    dispatch(requestActions.startRequest);

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: params.endpoint,
      params: fieldSearchModal.filter,
      paramsSerializer(axiosParams) {
        return qs.stringify(axiosParams, {
          encode: false,
          allowDots: true,
        });
      },
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      dispatch(receiveFieldSearchModalData(response.data));
      dispatch(requestActions.endRequest);
    }).catch(() => {
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
      dispatch(requestActions.endRequest);
    });
  };
}

export function clearFieldSearchModalData() {
  return {
    type: 'CLEAR_FIELD_SEARCH_MODAL_DATA',
  };
}

export function filterFieldSearchModalData(params) {
  return {
    type: 'FILTER_FIELD_SEARCH_MODAL_DATA',
    filter: params.filter,
  };
}
