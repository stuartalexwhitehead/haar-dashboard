import axios from 'axios';
import qs from 'qs';

import { startRequest, endRequest } from 'common/actions/request';
import { addFlash } from 'common/actions/flash';

export function requestDashboardDevices() {
  return {
    type: 'REQUEST_DASHBOARD_DEVICES',
  };
}

export function receiveDashboardDevices(response) {
  return {
    type: 'RECEIVE_DASHBOARD_DEVICES',
    response,
  };
}

export function fetchDashboardDevices() {
  return function fetchDashboardDevicesThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(requestDashboardDevices());
    dispatch(startRequest());

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: '/devices/mine',
      params: {
        lastData: 'true',
      },
      paramsSerializer(axiosParams) {
        return qs.stringify(axiosParams, {
          encode: false,
          allowDots: true,
        });
      },
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      if (response.data.status !== 'success') {
        dispatch(addFlash({
          flashType: 'warning',
          message: response.data.meta.message,
        }));

        return dispatch(endRequest());
      }

      dispatch(receiveDashboardDevices(response.data));
      dispatch(endRequest());
      return Promise.resolve(response.data.meta.message);
    }).catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
      dispatch(endRequest());
    });
  };
}

export function clearDashboardDevices() {
  return {
    type: 'CLEAR_DASHBOARD_DEVICES',
  };
}
