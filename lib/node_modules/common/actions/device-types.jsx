import axios from 'axios';
import qs from 'qs';
import _ from 'lodash';
import { browserHistory } from 'react-router';

import { startRequest, endRequest } from 'common/actions/request';
import { addFlash } from 'common/actions/flash';

export function requestDeviceTypes() {
  return {
    type: 'REQUEST_DEVICE_TYPES',
  };
}

export function receiveDeviceTypes(response) {
  return {
    type: 'RECEIVE_DEVICE_TYPES',
    response,
  };
}

export function requestDeviceType() {
  return {
    type: 'REQUEST_DEVICE_TYPE',
  };
}

export function receiveDeviceType(response) {
  return {
    type: 'RECEIVE_DEVICE_TYPE',
    response,
  };
}

export function fetchDeviceTypes(params) {
  return function fetchDeviceTypesThunk(dispatch, getState) {
    const { auth, deviceTypes } = getState();
    dispatch(requestDeviceTypes());
    dispatch(startRequest());

    const queryParams = _.merge(
      {},
      deviceTypes.index.filter,
      {
        page: _.get(params, 'page', null),
      }
    );

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: '/device-types',
      params: queryParams,
      paramsSerializer(axiosParams) {
        return qs.stringify(axiosParams, {
          encode: false,
          allowDots: true,
        });
      },
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      if (response.data.status !== 'success') {
        dispatch(addFlash({
          flashType: 'warning',
          message: response.data.meta.message,
        }));

        return dispatch(endRequest());
      }

      dispatch(receiveDeviceTypes(response.data));
      dispatch(endRequest());
      return Promise.resolve(response.data.meta.message);
    }).catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    });
  };
}

export function fetchDeviceType(params) {
  return function fetchDeviceTypeThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(requestDeviceType());
    dispatch(startRequest());

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: `/device-types/${params.segments.deviceType}`,
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      if (response.data.status !== 'success') {
        if (params.res) {
          return params.res.redirect('/dashboard/device-types');
        }

        return browserHistory.push('/dashboard/device-types');
      }

      dispatch(receiveDeviceType(response.data));
      dispatch(endRequest());
      return Promise.resolve(response.data.meta.message);
    }).catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    });
  };
}

export function filterDeviceTypes(params) {
  return {
    type: 'FILTER_DEVICE_TYPES',
    filter: params.filter,
  };
}

export function clearDeviceTypesFilter() {
  return {
    type: 'CLEAR_DEVICE_TYPES_FILTER',
  };
}

export function clearDeviceTypesIndex() {
  return {
    type: 'CLEAR_DEVICE_TYPES_INDEX',
  };
}

export function clearEditDeviceType() {
  return {
    type: 'CLEAR_EDIT_DEVICE_TYPE',
  };
}

export function addDeviceType(params) {
  return function addDeviceTypeThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'post',
      baseURL: process.env.API__URL,
      url: '/device-types',
      headers: {
        'x-access-token': auth.token,
      },
      data: params.data,
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      dispatch(endRequest());
      const { data } = response;

      if (data.status === 'success') {
        browserHistory.push('/dashboard/device-types');
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
        return Promise.resolve(data.meta.message);
      }

      if (data.status === 'fail' && data.meta.validation) {
        const errors = _.get(data.meta.validation, 'errors', {});

        if (_.isString(errors.dataDescriptor)) {
          errors.dataDescriptorMatrix = errors.dataDescriptor;
          errors.dataDescriptor = undefined;
        }

        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));

        return Promise.reject(errors);
      }

      dispatch(addFlash({
        flashType: 'warning',
        message: data.meta.message,
      }));
      return Promise.reject();
    });
  };
}

export function editDeviceType(params) {
  return function editDeviceTypeThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'put',
      baseURL: process.env.API__URL,
      url: `/device-types/${params.segments.deviceType}`,
      headers: {
        'x-access-token': auth.token,
      },
      data: params.data,
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      dispatch(endRequest());
      const { data } = response;

      if (data.status === 'success') {
        browserHistory.push('/dashboard/device-types');
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
        return Promise.resolve(data.meta.message);
      }

      if (data.status === 'fail' && data.meta.validation) {
        const errors = _.get(data.meta.validation, 'errors', {});

        if (_.isString(errors.dataDescriptor)) {
          errors.dataDescriptorMatrix = errors.dataDescriptor;
          errors.dataDescriptor = undefined;
        }

        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));

        return Promise.reject(errors);
      }

      dispatch(addFlash({
        flashType: 'warning',
        message: data.meta.message,
      }));
      return Promise.reject();
    });
  };
}
