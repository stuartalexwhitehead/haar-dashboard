import axios from 'axios';
import { browserHistory } from 'react-router';
import _ from 'lodash';
import qs from 'qs';

import { startRequest, endRequest } from 'common/actions/request';
import { addFlash } from 'common/actions/flash';
import { fetchCurrentUser } from 'common/actions/me';

export function requestUsers() {
  return {
    type: 'REQUEST_USERS',
  };
}

export function receiveUsers(response) {
  return {
    type: 'RECEIVE_USERS',
    response,
  };
}

export function requestUser() {
  return {
    type: 'REQUEST_USER',
  };
}

export function receiveUser(response) {
  return {
    type: 'RECEIVE_USER',
    response,
  };
}

export function clearUsersIndex() {
  return {
    type: 'CLEAR_USERS_INDEX',
  };
}

export function clearEditUser() {
  return {
    type: 'CLEAR_EDIT_USER',
  };
}

export function fetchUsers(params) {
  return function fetchUsersThunk(dispatch, getState) {
    const { auth, users } = getState();
    dispatch(requestUsers());
    dispatch(startRequest());

    const queryParams = _.merge(
      {},
      users.index.filter,
      {
        page: _.get(params, 'page', null),
      }
    );

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: '/users',
      params: queryParams,
      paramsSerializer(axiosParams) {
        return qs.stringify(axiosParams, {
          encode: false,
          allowDots: true,
        });
      },
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      if (response.data.status !== 'success') {
        dispatch(addFlash({
          flashType: 'warning',
          message: response.data.meta.message,
        }));

        return dispatch(endRequest());
      }

      dispatch(receiveUsers(response.data));
      dispatch(endRequest());
      return Promise.resolve(response.data.meta.message);
    }).catch(() => {
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
      dispatch(endRequest());
    });
  };
}

export function filterUsers(params) {
  return {
    type: 'FILTER_USERS',
    filter: params.filter,
  };
}

export function clearUsersFilter() {
  return {
    type: 'CLEAR_USERS_FILTER',
  };
}

export function fetchUser(params) {
  return function fetchUserThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(requestUser());
    dispatch(startRequest());

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: `/users/${_.get(params, 'segments.user', null)}`,
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      if (response.data.status !== 'success') {
        if (params.res) {
          return params.res.redirect('/dashboard/users');
        }

        return browserHistory.push('/dashboard/users');
      }

      dispatch(receiveUser(response.data));
      dispatch(endRequest());
      return Promise.resolve(response.data.meta.message);
    }).catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    });
  };
}

export function addUser(params) {
  return function addUserThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'post',
      baseURL: process.env.API__URL,
      url: '/users',
      headers: {
        'x-access-token': auth.token,
      },
      data: params.data,
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      dispatch(endRequest());
      const { data } = response;

      if (data.status === 'success') {
        browserHistory.push('/dashboard/users');
        dispatch(addFlash({
          flashType: 'success',
          message: 'User was created',
        }));
        return Promise.resolve(data.meta.message);
      }

      if (data.status === 'fail' && data.meta.validation) {
        const errors = _.get(data.meta.validation, 'errors', {});
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
        return Promise.reject(errors);
      }

      dispatch(addFlash({
        flashType: 'warning',
        message: data.meta.message,
      }));
      return Promise.reject();
    });
  };
}

export function editUser(params) {
  return function editUserThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'put',
      baseURL: process.env.API__URL,
      url: `/users/${params.segments.user}`,
      headers: {
        'x-access-token': auth.token,
      },
      data: params.data,
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      dispatch(endRequest());
      const { data } = response;

      if (data.status === 'success') {
        browserHistory.push('/dashboard/users');
        dispatch(addFlash({
          flashType: 'success',
          message: 'User was updated',
        }));
        return Promise.resolve(data.meta.message);
      }

      if (data.status === 'fail' && data.meta.validation) {
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
        const errors = _.get(data.meta.validation, 'errors', {});
        return Promise.reject(errors);
      }

      dispatch(addFlash({
        flashType: 'warning',
        message: data.meta.message,
      }));
      return Promise.reject();
    });
  };
}

export function editProfile(params) {
  return function editProfileThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'put',
      baseURL: process.env.API__URL,
      url: `/users/${params.user._id}`,
      headers: {
        'x-access-token': auth.token,
      },
      data: params.data,
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      dispatch(endRequest());
      const { data } = response;

      if (data.status === 'success') {
        dispatch(fetchCurrentUser());
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
        return Promise.resolve(data.meta.message);
      }

      if (data.status === 'fail' && data.meta.validation) {
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
        const errors = _.get(data.meta.validation, 'errors', {});
        return Promise.reject(errors);
      }

      dispatch(addFlash({
        flashType: 'warning',
        message: data.meta.message,
      }));
      return Promise.reject();
    });
  };
}

export function refreshUsersIndex() {
  return {
    type: 'REFRESH_USERS_INDEX',
  };
}

export function deleteUser(params) {
  return function deleteUserThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'delete',
      baseURL: process.env.API__URL,
      url: `/users/${params.user._id}`,
      headers: {
        'x-access-token': auth.token,
      },
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      const { data } = response;

      if (data.status === 'success') {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'success',
          message: 'User was deleted',
        }));
      } else {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
      }
    });
  };
}
