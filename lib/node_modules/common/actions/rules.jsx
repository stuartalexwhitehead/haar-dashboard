import axios from 'axios';
import { browserHistory } from 'react-router';
import _ from 'lodash';
import qs from 'qs';

import { startRequest, endRequest } from 'common/actions/request';
import { addFlash } from 'common/actions/flash';

export function showInputDeviceModal() {
  return {
    type: 'SHOW_INPUT_DEVICE_MODAL',
  };
}

export function hideInputDeviceModal() {
  return {
    type: 'HIDE_INPUT_DEVICE_MODAL',
  };
}

export function storeInputDeviceValue(params) {
  return {
    type: 'STORE_INPUT_DEVICE_VALUE',
    label: params.label,
    value: params.value,
  };
}

export function clearInputDeviceValue() {
  return {
    type: 'CLEAR_INPUT_DEVICE_VALUE',
  };
}


export function showOutputDeviceModal() {
  return {
    type: 'SHOW_OUTPUT_DEVICE_MODAL',
  };
}

export function hideOutputDeviceModal() {
  return {
    type: 'HIDE_OUTPUT_DEVICE_MODAL',
  };
}

export function storeOutputDeviceValue(params) {
  return {
    type: 'STORE_OUTPUT_DEVICE_VALUE',
    label: params.label,
    value: params.value,
  };
}

export function addRule(params) {
  return function addRuleThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    const bodyData = _.merge({}, params.data, {
      output: _.get(params, 'segments.device', null),
    });

    return axios({
      method: 'post',
      baseURL: process.env.API__URL,
      url: '/rules',
      headers: {
        'x-access-token': auth.token,
      },
      data: bodyData,
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      dispatch(endRequest());
      const { data } = response;

      if (data.status === 'success') {
        browserHistory.push(`/dashboard/devices/${params.segments.device}/rules`);
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
        return Promise.resolve(data.meta.message);
      }

      if (data.status === 'fail' && data.meta.validation) {
        const errors = _.get(data.meta.validation, 'errors', {});
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
        return Promise.reject(errors);
      }

      dispatch(addFlash({
        flashType: 'warning',
        message: data.meta.message,
      }));
      return Promise.reject();
    });
  };
}

export function requestRules() {
  return {
    type: 'REQUEST_RULES',
  };
}

export function receiveRules(response) {
  return {
    type: 'RECEIVE_RULES',
    response,
  };
}

export function fetchRules(params) {
  return function fetchRulesThunk(dispatch, getState) {
    const { auth, rules } = getState();
    dispatch(requestRules());
    dispatch(startRequest());

    const queryParams = _.merge(
      {},
      rules.index.filter,
      {
        device: _.get(params, 'segments.device', null),
      },
      {
        page: _.get(params, 'page', null),
      }
    );

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: '/rules',
      params: queryParams,
      paramsSerializer(axiosParams) {
        return qs.stringify(axiosParams, {
          encode: false,
          allowDots: true,
        });
      },
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      if (response.data.status !== 'success') {
        if (params.res) {
          return params.res.redirect('/dashboard/devices');
        }

        return browserHistory.push('/dashboard/devices');
      }

      dispatch(receiveRules(response.data));
      dispatch(endRequest());
      return Promise.resolve(response.data.meta.message);
    }).catch(() => {
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
      dispatch(endRequest());
    });
  };
}

export function clearRulesIndex() {
  return {
    type: 'CLEAR_RULES_INDEX',
  };
}

export function filterRules(params) {
  return {
    type: 'FILTER_RULES',
    filter: params.filter,
  };
}

export function clearRulesFilter() {
  return {
    type: 'CLEAR_RULES_FILTER',
  };
}

export function enableRule(params) {
  return function enableRuleThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'put',
      baseURL: process.env.API__URL,
      url: `/rules/${params.rule._id}/enable`,
      headers: {
        'x-access-token': auth.token,
      },
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      const { data } = response;

      if (data.status === 'success') {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
      } else {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
      }
    });
  };
}

export function disableRule(params) {
  return function disableRuleThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'put',
      baseURL: process.env.API__URL,
      url: `/rules/${params.rule._id}/disable`,
      headers: {
        'x-access-token': auth.token,
      },
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      const { data } = response;

      if (data.status === 'success') {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
      } else {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
      }
    });
  };
}

export function deleteRule(params) {
  return function deleteRuleThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'delete',
      baseURL: process.env.API__URL,
      url: `/rules/${params.rule._id}`,
      headers: {
        'x-access-token': auth.token,
      },
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      const { data } = response;

      if (data.status === 'success') {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
      } else {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
      }
    });
  };
}

export function requestRule() {
  return {
    type: 'REQUEST_RULE',
  };
}

export function receiveRule(response) {
  return {
    type: 'RECEIVE_RULE',
    response,
  };
}

export function fetchRule(params) {
  return function fetchRuleThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(requestRule());
    dispatch(startRequest());

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: `/rules/${_.get(params, 'segments.rule', null)}`,
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      if (response.data.status !== 'success') {
        if (params.res) {
          return params.res.redirect('/dashboard/devices');
        }

        return browserHistory.push('/dashboard/devices');
      }

      dispatch(storeInputDeviceValue({
        label: response.data.data.input.name,
        value: response.data.data.input._id,
      }));
      dispatch(receiveRule(response.data));
      dispatch(endRequest());
      return Promise.resolve(response.data.meta.message);
    }).catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    });
  };
}

export function editRule(params) {
  return function editRuleThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'put',
      baseURL: process.env.API__URL,
      url: `/rules/${params.segments.rule}`,
      headers: {
        'x-access-token': auth.token,
      },
      data: params.data,
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      dispatch(endRequest());
      const { data } = response;

      if (data.status === 'success') {
        browserHistory.push(`/dashboard/devices/${params.segments.device}/rules`);
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
        return Promise.resolve(data.meta.message);
      }

      if (data.status === 'fail' && data.meta.validation) {
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
        const errors = _.get(data.meta.validation, 'errors', {});
        return Promise.reject(errors);
      }

      dispatch(addFlash({
        flashType: 'warning',
        message: data.meta.message,
      }));
      return Promise.reject();
    });
  };
}

export function clearEditRule() {
  return {
    type: 'CLEAR_EDIT_RULE',
  };
}
