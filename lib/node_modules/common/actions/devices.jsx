import axios from 'axios';
import qs from 'qs';
import _ from 'lodash';
import { browserHistory } from 'react-router';

import { startRequest, endRequest } from 'common/actions/request';
import { addFlash } from 'common/actions/flash';

export function requestDevices() {
  return {
    type: 'REQUEST_DEVICES',
  };
}

export function receiveDevices(response) {
  return {
    type: 'RECEIVE_DEVICES',
    response,
  };
}

export function showDeviceTypeModal() {
  return {
    type: 'SHOW_DEVICE_TYPE_MODAL',
  };
}

export function hideDeviceTypeModal() {
  return {
    type: 'HIDE_DEVICE_TYPE_MODAL',
  };
}

export function storeDeviceTypeValue(params) {
  return {
    type: 'STORE_DEVICE_TYPE_VALUE',
    label: params.label,
    value: params.value,
  };
}

export function clearDeviceTypeValue() {
  return {
    type: 'CLEAR_DEVICE_TYPE_VALUE',
  };
}

export function fetchDevices(params) {
  return function fetchDevicesThunk(dispatch, getState) {
    const { auth, devices } = getState();
    dispatch(requestDevices());
    dispatch(startRequest());

    const queryParams = _.merge(
      {},
      devices.index.filter,
      {
        page: _.get(params, 'page', null),
      }
    );

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: '/devices',
      params: queryParams,
      paramsSerializer(axiosParams) {
        return qs.stringify(axiosParams, {
          encode: false,
          allowDots: true,
        });
      },
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      if (response.data.status !== 'success') {
        dispatch(addFlash({
          flashType: 'warning',
          message: response.data.meta.message,
        }));

        return dispatch(endRequest());
      }

      dispatch(receiveDevices(response.data));
      dispatch(endRequest());
      return Promise.resolve(response.data.meta.message);
    }).catch(() => {
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
      dispatch(endRequest());
    });
  };
}

export function clearDevicesIndex() {
  return {
    type: 'CLEAR_DEVICES_INDEX',
  };
}

export function addDevice(params) {
  return function addDeviceThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'post',
      baseURL: process.env.API__URL,
      url: '/devices',
      headers: {
        'x-access-token': auth.token,
      },
      data: params.data,
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      dispatch(endRequest());
      const { data } = response;

      if (data.status === 'success') {
        browserHistory.push('/dashboard/devices');
        dispatch(clearDeviceTypeValue());
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
        return Promise.resolve(data.meta.message);
      }

      if (data.status === 'fail' && data.meta.validation) {
        const errors = _.get(data.meta.validation, 'errors', {});
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
        return Promise.reject(errors);
      }

      dispatch(addFlash({
        flashType: 'warning',
        message: data.meta.message,
      }));
      return Promise.reject();
    });
  };
}

export function filterDevices(params) {
  return {
    type: 'FILTER_DEVICES',
    filter: params.filter,
  };
}

export function clearDevicesFilter() {
  return {
    type: 'CLEAR_DEVICES_FILTER',
  };
}

export function deleteDevice(params) {
  return function deleteDeviceThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'delete',
      baseURL: process.env.API__URL,
      url: `/devices/${params.device._id}`,
      headers: {
        'x-access-token': auth.token,
      },
    })
    .catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      const { data } = response;

      if (data.status === 'success') {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
      } else {
        dispatch(endRequest());
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
      }
    });
  };
}

export function requestDevice() {
  return {
    type: 'REQUEST_DEVICE',
  };
}

export function receiveDevice(response) {
  return {
    type: 'RECEIVE_DEVICE',
    response,
  };
}

export function fetchDevice(params) {
  return function fetchDeviceThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(requestDevice());
    dispatch(startRequest());

    return axios({
      method: 'get',
      baseURL: process.env.API__URL,
      url: `/devices/${_.get(params, 'segments.device', null)}`,
      headers: {
        'x-access-token': auth.token,
      },
    })
    .then(response => {
      if (response.data.status !== 'success') {
        if (params.res) {
          return params.res.redirect('/dashboard/devices');
        }

        return browserHistory.push('/dashboard/devices');
      }

      dispatch(storeDeviceTypeValue({
        label: response.data.data.deviceType.name,
        value: response.data.data.deviceType._id,
      }));
      dispatch(receiveDevice(response.data));
      dispatch(endRequest());
      return Promise.resolve(response.data.meta.message);
    }).catch(() => {
      dispatch(endRequest());
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    });
  };
}

export function editDevice(params) {
  return function editDeviceThunk(dispatch, getState) {
    const { auth } = getState();
    dispatch(startRequest());

    return axios({
      method: 'put',
      baseURL: process.env.API__URL,
      url: `/devices/${params.segments.device}`,
      headers: {
        'x-access-token': auth.token,
      },
      data: params.data,
    })
    .catch(() => {
      dispatch(addFlash({
        flashType: 'warning',
        message: 'A network error occured',
      }));
    })
    .then(response => {
      dispatch(endRequest());
      const { data } = response;

      if (data.status === 'success') {
        browserHistory.push('/dashboard/devices');
        dispatch(addFlash({
          flashType: 'success',
          message: data.meta.message,
        }));
        return Promise.resolve(data.meta.message);
      }

      if (data.status === 'fail' && data.meta.validation) {
        dispatch(addFlash({
          flashType: 'warning',
          message: data.meta.message,
        }));
        const errors = _.get(data.meta.validation, 'errors', {});
        return Promise.reject(errors);
      }

      dispatch(addFlash({
        flashType: 'warning',
        message: data.meta.message,
      }));
      return Promise.reject();
    });
  };
}

export function clearEditDevice() {
  return {
    type: 'CLEAR_EDIT_DEVICE',
  };
}
