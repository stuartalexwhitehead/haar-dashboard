import React from 'react';
import { reduxForm } from 'redux-form';

import Button from 'common/components/button';
import Form from 'common/forms/form';
import FormRow from 'common/forms/form-row';
import FieldInput from 'common/forms/field-input';
import FieldTextarea from 'common/forms/field-textarea';
import FieldDropdown from 'common/forms/field-dropdown';
import Matrix from 'common/forms/matrix';

const fields = [
  'name',
  'description',
  'developer',
  'deviceClass',
  'dataDescriptorMatrix',
  'dataDescriptor[].label',
  'dataDescriptor[].name',
  'dataDescriptor[].description',
  'dataDescriptor[].unit.longform',
  'dataDescriptor[].unit.shortform',
  'dataDescriptor[].max',
  'dataDescriptor[].min',
];

class DeviceTypeForm extends React.Component {
  static propTypes = {
    cta: React.PropTypes.string,
    handleSubmit: React.PropTypes.func,
    fields: React.PropTypes.object,
  };

  render() {
    const {
      fields: {
        name, description, developer, deviceClass, dataDescriptor, dataDescriptorMatrix,
      }, handleSubmit, cta,
    } = this.props;

    return (
      <Form onSubmit={handleSubmit}>
        <div className="device-type-form__container">
          <FormRow>
            <FieldInput
              id="name"
              label="Name"
              {...name}
            />
          </FormRow>
          <FormRow>
            <FieldTextarea
              id="description"
              label="Description"
              {...description}
            />
          </FormRow>
          <FormRow>
            <FieldInput
              id="developer"
              label="Developer"
              {...developer}
            />
          </FormRow>
          <FormRow>
            <FieldDropdown
              id="deviceClass"
              label="Device Class"
              options={{
                input: 'Input',
                output: 'Output',
              }}
              {...deviceClass}
            />
          </FormRow>
        </div>
        <Matrix
          specification={dataDescriptor}
          label="Data Descriptor"
          error={dataDescriptorMatrix.error}
          fields={{
            label: {
              label: 'Label',
              component: FieldInput,
            },
            name: {
              label: 'Name',
              component: FieldInput,
            },
            description: {
              label: 'Description',
              component: FieldTextarea,
            },
            'unit.longform': {
              label: 'Longform Unit',
              component: FieldInput,
            },
            'unit.shortform': {
              label: 'Shortform Unit',
              component: FieldInput,
            },
            min: {
              label: 'Min',
              component: FieldInput,
            },
            max: {
              label: 'Max',
              component: FieldInput,
            },
          }}
        />
        <div className="device-type-form__container">
          <FormRow>
            <Button type="submit">{cta}</Button>
          </FormRow>
        </div>
      </Form>
    );
  }
}

const DecoratedDeviceTypeForm = reduxForm({
  form: 'addDeviceType',
  fields,
})(DeviceTypeForm);

export default DecoratedDeviceTypeForm;
