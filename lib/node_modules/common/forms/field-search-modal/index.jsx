import React from 'react';
import { connect } from 'react-redux';
import _ from 'lodash';

import Button from 'common/components/button';
import DashboardHeader from 'common/components/dashboard-header';
import Filter from 'common/components/filter';
import ResponsiveTable from 'common/components/responsive-table';
import {
  fetchFieldSearchModalData,
  clearFieldSearchModalData,
  filterFieldSearchModalData } from 'common/actions/field-search-modal';

class FieldSearchModal extends React.Component {
  static propTypes = {
    title: React.PropTypes.string.isRequired,
    filterSpecification: React.PropTypes.object.isRequired,
    tableColumns: React.PropTypes.object.isRequired,
    tableRows: React.PropTypes.object.isRequired,
    endpoint: React.PropTypes.string.isRequired,
    fieldSearchModal: React.PropTypes.object,
    handleSelect: React.PropTypes.func,
    handleCancel: React.PropTypes.func,
    dispatch: React.PropTypes.func,
  };

  static defaultProps = {
    filterSpecification: {},
    tableColumns: {},
    endpoint: '/',
  };

  componentWillMount() {
    const { dispatch, endpoint } = this.props;

    dispatch(fetchFieldSearchModalData({
      endpoint,
    }));
  }

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearFieldSearchModalData());
  }

  getTable = () => {
    const { tableColumns, tableRows, fieldSearchModal, handleSelect } = this.props;
    const hasData = fieldSearchModal.data !== null && fieldSearchModal.data.length;

    const columns = Object.assign({}, tableColumns, {
      actions: 'Actions',
    });

    if (hasData) {
      const rows = fieldSearchModal.data.map(row => {
        const actions = (
          <span>
            <Button
              size="small"
              onClick={() => handleSelect({
                label: row[Object.keys(columns)[0]],
                value: row._id,
              })}
            >
              Select
            </Button>
          </span>
        );

        const parsedRow = Object.keys(tableColumns).reduce((prev, curr) => {
          let str = '';
          if (_.isString(tableRows[curr])) {
            str = this.parseStringFromPath(tableRows[curr], row);
          }

          if (_.isArray(tableRows[curr])) {
            tableRows[curr].forEach((path, pathIndex, arr) => {
              str += this.parseStringFromPath(path, row);

              if ((pathIndex + 1) < arr.length) {
                str += ' ';
              }
            });
          }

          return Object.assign(prev, {
            [curr]: str,
          });
        }, {});

        parsedRow.actions = actions;

        return parsedRow;
      });

      return <ResponsiveTable columns={columns} data={rows} />;
    }

    return null;
  }

  filterData = (data) => {
    const { dispatch, endpoint } = this.props;

    dispatch(filterFieldSearchModalData({
      filter: data,
    }));

    dispatch(fetchFieldSearchModalData({
      endpoint,
    }));
  }

  parseStringFromPath = (path, data) => _.get(data, path, null);

  render() {
    const { title, filterSpecification, handleCancel } = this.props;

    return (
      <div className="field-search-modal">
        <DashboardHeader title={`Select a ${title}`} />
        <Button theme="danger" onClick={handleCancel}>Cancel</Button>
        <Filter
          filterFor={title}
          fields={Object.keys(filterSpecification)}
          specification={filterSpecification}
          onSubmit={this.filterData}
        />
        {this.getTable()}
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  fieldSearchModal: state.fieldSearchModal,
});

export default connect(mapStateToProps)(FieldSearchModal);
