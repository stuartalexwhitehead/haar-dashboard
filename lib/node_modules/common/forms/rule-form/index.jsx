import React from 'react';
import { reduxForm } from 'redux-form';

import Button from 'common/components/button';
import Form from 'common/forms/form';
import FormRow from 'common/forms/form-row';
import FieldInput from 'common/forms/field-input';
import FieldTextarea from 'common/forms/field-textarea';
import FieldDropdown from 'common/forms/field-dropdown';
import FieldInputSelect from 'common/forms/field-input-select';
import Container from 'common/components/container';
import FieldSearchModal from 'common/forms/field-search-modal';

import {
  showInputDeviceModal,
  hideInputDeviceModal,
  storeInputDeviceValue,
  clearInputDeviceValue,
} from 'common/actions/rules';

const fields = [
  'name',
  'description',
  'input',
  'output',
  'rule',
  'enabled',
];

class RuleForm extends React.Component {
  static propTypes = {
    inputDeviceModal: React.PropTypes.object,
    cta: React.PropTypes.string,
    handleSubmit: React.PropTypes.string,
    fields: React.PropTypes.object,
    dispatch: React.PropTypes.func,
  };

  componentWillUnmount() {
    const { dispatch } = this.props;

    dispatch(clearInputDeviceValue());
    dispatch(hideInputDeviceModal());
  }

  showInputDeviceModal = () => {
    const { dispatch } = this.props;

    dispatch(showInputDeviceModal());
  }

  hideInputDeviceModal = () => {
    const { dispatch } = this.props;

    dispatch(hideInputDeviceModal());
  }

  storeInputDeviceValue = (data) => {
    const { dispatch } = this.props;

    dispatch(storeInputDeviceValue(data));
  }

  render() {
    const {
      fields: {
        name, description, input, rule,
      }, handleSubmit, cta, inputDeviceModal,
    } = this.props;

    const inputFilterSpecification = {
      name: {
        label: 'Name',
        component: FieldInput,
      },
      visibility: {
        label: 'Visibility',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Any',
            private: 'Private',
            public: 'Public',
          },
        },
      },
      sort: {
        label: 'Sort',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            name: 'Name',
            visibility: 'Visibility',
            address: 'Address',
          },
        },
      },
      order: {
        label: 'Order',
        component: FieldDropdown,
        props: {
          options: {
            '': 'Default',
            asc: 'Ascending',
            desc: 'Descending',
          },
        },
      },
    };

    const tableColumns = {
      name: 'Name',
      visibility: 'Visibility',
      owner: 'Owner',
      deviceClass: 'Device Class',
      address: 'Address',
    };

    const tableRows = {
      name: 'name',
      visibility: 'visibility',
      owner: [
        'owner.name.given',
        'owner.name.family',
      ],
      deviceClass: 'deviceType.deviceClass',
      address: 'address',
    };

    return (
      <div>
        {inputDeviceModal.visible ?
          <FieldSearchModal
            title="Input Device"
            filterSpecification={inputFilterSpecification}
            handleCancel={this.hideInputDeviceModal}
            handleSelect={this.storeInputDeviceValue}
            tableColumns={tableColumns}
            tableRows={tableRows}
            endpoint="/devices?deviceType.deviceClass=input"
          />
        : null}
        <Form onSubmit={handleSubmit}>
          <Container>
            <FormRow>
              <FieldInput
                id="name"
                label="Name"
                {...name}
              />
            </FormRow>
            <FormRow>
              <FieldTextarea
                id="description"
                label="Description"
                {...description}
              />
            </FormRow>
            <FormRow>
              <FieldInputSelect
                id="input"
                label="Input Device"
                handleClick={this.showInputDeviceModal}
                display={inputDeviceModal.label}
                {...input}
                value={inputDeviceModal.value}
              />
            </FormRow>
            <FormRow>
              <FieldTextarea
                id="rule"
                label="Rule"
                {...rule}
              />
            </FormRow>
          </Container>
          <FormRow>
            <Button type="submit">{cta}</Button>
          </FormRow>
        </Form>
      </div>
    );
  }
}

const DecoratedRuleForm = reduxForm({
  form: 'rule',
  fields,
}, (state) => ({
  inputDeviceModal: state.rules.inputDeviceModal,
}))(RuleForm);

export default DecoratedRuleForm;
