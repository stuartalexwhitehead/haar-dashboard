import React from 'react';
import { connect } from 'react-redux';
import _ from 'lodash';

import Button from 'common/components/button';

class Pagination extends React.Component {
  static propTypes = {
    meta: React.PropTypes.object.isRequired,
    action: React.PropTypes.func.isRequired,
    actionParams: React.PropTypes.object,
    dispatch: React.PropTypes.func,
  };

  static defaultProps = {
    actionParams: {},
  };

  hasPrevious = () => {
    const { meta: { paginate } } = this.props;
    return paginate.currentPage > 1;
  }

  hasNext = () => {
    const { meta: { paginate } } = this.props;
    return paginate.currentPage < paginate.pages;
  }

  fetchFirst = () => {
    const { action, actionParams, dispatch } = this.props;

    const params = _.merge({}, {
      page: 1,
    }, actionParams);

    dispatch(action(params));
  }

  fetchPrevious = () => {
    const { meta: { paginate }, action, actionParams, dispatch } = this.props;

    const params = _.merge({}, {
      page: parseInt(paginate.currentPage, 10) - 1,
    }, actionParams);

    dispatch(action(params));
  }

  fetchNext = () => {
    const { meta: { paginate }, action, actionParams, dispatch } = this.props;

    const params = _.merge({}, {
      page: parseInt(paginate.currentPage, 10) + 1,
    }, actionParams);

    dispatch(action(params));
  }

  fetchLast = () => {
    const { meta: { paginate }, action, actionParams, dispatch } = this.props;

    const params = _.merge({}, {
      page: paginate.pages,
    }, actionParams);

    dispatch(action(params));
  }

  render() {
    const { meta: { paginate } } = this.props;

    return (
      <div className="pagination">
        <p className="pagination__results">
          {`Page ${paginate.currentPage} of ${paginate.pages} (${paginate.total} Results)`}
        </p>
        <div className="pagination__links">
          {this.hasPrevious() ?
            <span>
              <Button size="small" onClick={this.fetchFirst}>First</Button>
              <Button size="small" onClick={this.fetchPrevious}>Previous</Button>
            </span>
          : null}

          {this.hasNext() ?
            <span>
              <Button size="small" onClick={this.fetchNext}>Next</Button>
              <Button size="small" onClick={this.fetchLast}>Last</Button>
            </span>
          : null}
        </div>
      </div>
    );
  }
}

export default connect()(Pagination);
