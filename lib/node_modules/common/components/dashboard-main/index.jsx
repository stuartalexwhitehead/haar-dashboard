import React from 'react';
import { connect } from 'react-redux';

import Loader from 'common/components/loader';
import Logo from 'common/components/logo';
import FlashMessage from 'common/components/flash-message';

import { removeFlash } from 'common/actions/flash';

class DashboardMain extends React.Component {
  static propTypes = {
    children: React.PropTypes.oneOfType([
      React.PropTypes.element,
      React.PropTypes.array,
    ]),
    request: React.PropTypes.object,
    flash: React.PropTypes.object,
    dispatch: React.PropTypes.func,
  };

  componentDidMount() {
    const { flash } = this.props;

    if (!!flash) {
      this.removeFlash();
    }
  }

  componentDidUpdate() {
    const { flash } = this.props;

    if (!!flash) {
      this.removeFlash();
    }
  }

  removeFlash() {
    const { dispatch } = this.props;

    setTimeout(() => {
      dispatch(removeFlash());
    }, 5500);
  }

  render() {
    const { flash, request } = this.props;

    return (
      <main className="dashboard-main">
        {!!flash ?
          <FlashMessage type={flash.flashType}>{flash.message}</FlashMessage>
        : null}

        {request.isFetching ?
          <div className="dashboard-main__overlay">
            <Loader />
          </div>
        : null}

        {this.props.children}
        <footer className="dashboard-main__footer">
          <Logo className="dashboard-main__logo" />
        </footer>
      </main>
    );
  }
}

const mapStateToProps = (state) => ({
  request: state.request,
  flash: state.flash,
});

export default connect(mapStateToProps)(DashboardMain);
